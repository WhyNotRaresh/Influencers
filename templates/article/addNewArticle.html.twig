{% extends "base.html.twig" %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .dropbtn {
            background-color: #4CAF50;
            color: white;
            padding: 16px;
            font-size: 16px;
            border: none;
            cursor: pointer;
        }

        /* Dropdown button on hover & focus */
        .dropbtn:hover, .dropbtn:focus {
            background-color: #3e8e41;
        }

        /* The search field */
        #myInput {
            box-sizing: border-box;
            background-image: url('searchicon.png');
            background-position: 14px 12px;
            background-repeat: no-repeat;
            font-size: 16px;
            padding: 14px 20px 12px 45px;
            border: none;
            border-bottom: 1px solid #ddd;
        }

        /* The search field when it gets focus/clicked on */
        #myInput:focus {outline: 3px solid #ddd;}

        /* The container <div> - needed to position the dropdown content */
        .dropdown {
            position: relative;
            display: inline-block;
        }

        /* Dropdown Content (Hidden by Default) */
        .dropdown-content {
            display: none;
            position: absolute;
            background-color: #f6f6f6;
            min-width: 230px;
            border: 1px solid #ddd;
            z-index: 1;
        }

        /* Links inside the dropdown */
        .dropdown-content a {
            color: black;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
        }

        /* Change color of dropdown links on hover */
        .dropdown-content a:hover {background-color: #f1f1f1}

        /* Show the dropdown menu (use JS to add this class to the .dropdown-content container when the user clicks on the dropdown button) */
        .show {display:block;}
    </style>

{% endblock %}

{% block body %}

    <div id="see">Number of tags:</div>

    {{ form_start(form) }}

    <ul id="tags-fields-list"
        data-prototype="{{ form_widget(form.tagList.vars.prototype)|e }}"
        data-widget-tags="{{ '<li></li>'|e }}"
        data-widget-counter="{{ form.tagList|length }}">
        {% for tag in form.tagList %}
            <li>
                {{ form_errors(tag) }}
                {{ form_widget(tag) }}
            </li>
        {% endfor %}
    </ul>

    <div class="dropdown">
        <button onclick="myFunction()" class="dropbtn"> Add a tag </button>
        <div id="myDropdown" class="dropdown-content">
            <input type="text" placeholder="Search for tag.." id="myInput" onkeyup="filterFunction()">
            <a class="add-another-collection-widget" data-list-selector="#tags-fields-list" onclick="setTag(this)" href=""></a>
            <a class="add-another-collection-widget" data-list-selector="#tags-fields-list" href=""></a>
            <a class="add-another-collection-widget" data-list-selector="#tags-fields-list" href=""></a>
        </div>
    </div>

    {{ form_end(form) }}
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    <script>
        function myFunction() {
            document.getElementById("myDropdown").classList.toggle("show");
        }
    </script>
    
    <script>
        function filterFunction() {
            var input, filter, a, i, txt, tagList;
            input = document.getElementById("myInput");
            filter = input.value.toLowerCase();
            div = document.getElementById("myDropdown");
            a = div.getElementsByTagName("a");
            txt = input.value;

            if (txt != '') {
                var xmlhttp = new XMLHttpRequest();
                xmlhttp.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        tagList = JSON.parse(this.responseText);
                    }
                }
                xmlhttp.open('GET', '/get/tags/' + txt, false);
                xmlhttp.send();
            } else {
                for (i = 0 ; i < 3; i++) {
                    a[i].style.display = "none";
                }
                return;
            }

            for (i = 0; i < tagList.length; i++) {
                a[i].style.display = "";
                a[i].innerText = tagList[i].tagName;
                a[i].href = "#" + tagList[i].id.toString() + "__" + tagList[i].tagName + "__";
            }
            for ( ; i < 3; i++) {
                a[i].style.display = "none";
            }
        }
    </script>

    <script>
        // add-collection-widget.js
        $(document).ready(function () {
            $('.add-another-collection-widget').click(function (e) {
                var list = $($(this).attr('data-list-selector'));
                var counter = list.data('widget-counter') || list.children().length;

                // grab the prototype template
                var newWidget = list.attr('data-prototype');

                newWidget = newWidget.replace(/__name__/g, counter);
                counter++;
                list.data('widget-counter', counter);

                // create a new list element and add it to the list
                var newElem = $(list.attr('data-widget-tags')).html(newWidget);
                newElem.appendTo(list);
            });
        });
    </script>

{% endblock %}